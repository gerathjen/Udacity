{
  "name": "gulp-jasmine-phantom",
  "version": "3.0.0",
  "description": "Jasmine 2.0 suite runner, optionally with PhantomJS",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dflynn15/gulp-jasmine-phantom.git"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "keywords": [
    "gulpplugin",
    "jasmine",
    "phantom",
    "test",
    "testing",
    "unit",
    "integration",
    "framework",
    "runner",
    "tdd",
    "bdd",
    "spec"
  ],
  "dependencies": {
    "glob": "^4.0.6",
    "gulp-util": "^3.0.0",
    "handlebars": "^2.0.0",
    "jasmine": "github:dflynn15/jasmine-npm",
    "lodash": "^4.3.0",
    "through2": "^0.6.1"
  },
  "devDependencies": {
    "JSON": "^1.0.0",
    "gulp": "^3.8.7",
    "gulp-jasmine": "^1.0.1",
    "jasmine-fixture": "^1.0.8"
  },
  "readme": "gulp-jasmine-phantom\n=============\n\nA gulp plugin that runs Jasmine tests with either PhantomJS or minijasminenode2.\n\nDependencies\n------------\n\nThis module uses `execSync` which is not available in any version of Node under `0.12.x`.\nIf you have any specific concerns about upgrading versions of Node or reasons not use\n`execSync` feel free to open an issue!\n\nBefore you install `gulp-jasmine-phantom` please ensure that you have PhantomJS\ninstalled on your machine. The plugin assumes that the `phantomjs` binary is\navailable in the PATH and executable from the command line.\n\nIf not, ensure you at least have `phantomjs` as an npm dependency. The module\nchecks in `./node_modules/phantomjs` for an executable if you do not have it\ninstalled globally.\n\n**If you do not have `phantomjs` installed please install following\n[these directions.](http://phantomjs.org/download.html)\n\nInstall\n-----\n\n```\n$ npm install --save-dev gulp-jasmine-phantom\n```\n\nUsage\n-----\nBy default, `gulp-jasmine-phantom` runs your tests with `minijasminenode` and\nnot `phantomjs`.\nThis is an effort to keep your tasks running as quickly as possible!\n\nBasic usage:\n```javascript\nvar gulp = require('gulp');\nvar jasmine = require('gulp-jasmine-phantom');\n\ngulp.task('default', function () {\n  return gulp.src('spec/test.js')\n          .pipe(jasmine());\n});\n```\nTo use `phantomjs` for tests (ie: integration tests) use the following setup:\n\n```javascript\nvar gulp = require('gulp');\nvar jasmine = require('gulp-jasmine-phantom');\n\ngulp.task('default', function() {\n  return gulp.src('spec/test.js')\n          .pipe(jasmine({\n            integration: true\n          }));\n});\n```\n\nAlso, remember you can always run any multitude of tests using different Gulp\ntasks. For example, running unit tests and integration tests asynchronously.\n\n```javascript\nvar gulp = require('gulp');\nvar jasmine = require('gulp-jasmine-phantom');\n\ngulp.task('unitTests', function () {\n  return gulp.src('spec/test.js')\n          .pipe(jasmine());\n});\n\ngulp.task('integrationTests', function() {\n  return gulp.src('spec/test.js')\n          .pipe(jasmine({\n            integration: true\n          }));\n});\n```\n\nOptions\n-------\n\n#### integration\nType: `boolean` <br />\nDefault: false\n\nRun your tests with `phantomjs`\n\n#### keepRunner\nType: `boolean | string` <br />\nDefault: false\n\nKeep the `specRunner.html` file after build. If given a string, it will keep\nthe runner at the string path.\n\n#### includeStackTrace\nType: `boolean` <br />\nDefault: false\n\nPrints out a longer stack trace for errors.\n\n#### abortOnFail\nType: `boolean` <br />\nDefault: false\n\n**Currently built with integration mode only** <br />\nExits Gulp with an status of 1 that will halt any further Gulp tasks.\n\n#### specHtml\nType: `string` <br />\nDefault: null\n\n**Only use in combination with `integration: true`**\n\nAllows you to specify the HTML runner that Jasmine uses **only** during\nintegration tests.\n\n#### vendor\nType: `string | array` <br />\nDefault: null\n\n**Only use in combination with `integration: true`**\n\nA list of vendor scripts to import into the HTML runner, either as file\nglobs (e.g. `\"**/*.js\"`) or fully-qualified URLs (e.g.\n`\"http://my.cdn.com/jquery.js\"`).\n\nThis option accepts either a single string or an array of strings (e.g.\n`[\"test/*.js\", \"http://my.cdn.com/underscore.js\"]`).\n\n#### jasmineVersion (integration tests only)\nType: `string` <br />\nDefault: '2.0'\n\n**Only use in combination with `integration: true`**\n\nSpecifies the version of Jasmine you want to run. Possible options are in the `vendor/` folder. Just specify what `2.x` minor release you want.\n\n#### random (unit tests only)\nType: 'boolean'<br />\nDefault: false\n\nAllows you to run the unit tests in a semi-random order. The random seed will be printed out after the tests have completed to allow for easier debugging.\n\n#### seed (unit tests only)\nType: 'number'<br />\n\nProvides a given seed to Jasmine to run the tests in.\n\nTechnologies Used\n-----------------\n\n* Node\n* Gulp\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dflynn15/gulp-jasmine-phantom/issues"
  },
  "homepage": "https://github.com/dflynn15/gulp-jasmine-phantom#readme",
  "_id": "gulp-jasmine-phantom@3.0.0",
  "_from": "gulp-jasmine-phantom@latest"
}
